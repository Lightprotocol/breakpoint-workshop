pragma circom 2.1.4;

include "poseidon.circom";
include "merkleProof.circom";
include "keypair.circom";
include "gates.circom";
include "comparators.circom";

/**
* Declares the instance of the swaps circuit.
*/
#[instance]
{
    name: swaps,
}

/**
* Declares the utxo type SwapUtxo.
* A swap utxo holds the following data:
* - priceSol: the price in sol (0 if the price is not denominated in sol)
* - priceSpl: the price in spl (0 if the price is denominated in sol)
* - splAsset: the spl token used for the price (0 if the price is denominated in sol)
* - recipient: the recipient shielded public key of the swap proceeds (the maker)
* - recipientEncryptionPublicKey: the recipients encryption public key proceeds utxo to the recipient
*/
utxoType SwapUtxo {
    priceSol,
    priceSpl,
    splAsset,
    recipient,
    recipientEncryptionPublicKey,
}

/**
* Declares the input utxo offer utxo of type SwapUtxo.
*/
inUtxo offerUtxo {
  type: SwapUtxo,
}

/**
 * Declares the native output UTXO for an offer utxo.
 * - Validates the output UTXO if takeOfferInstruction is not zero.
 * - Ensures output UTXO exists, and matches price, asset, and recipient of offer UTXO.
 */
outUtxo offerRewardUtxo {
  type: native,
  enabled: takeOfferInstruction,
  checks: {
    amountSol == offerUtxo.priceSol,
    amountSpl == offerUtxo.priceSpl,
    assetSpl == offerUtxo.splAsset,
    publicKey == offerUtxo.recipient,
    blinding == offerUtxo.blinding,
  },
}

/*
* Declares a native input utxo which checks the signer,
* so that only the maker can cancel the swap.
* The signer utxo does not need to hold any value,
* it can be a filling utxo.
*/
// inUtxo cancelSignerUtxo {
//   type: native,
//   enabled: cancelInstruction,
//   checks: {
//     publicKey == offerUtxo.recipient,
//   },
// }

/*
* Implements the swaps template as entrypoint for the PSP circuit.
* The swaps template implements the following instructions:
* - take offer instruction
* - take counter offer instruction
* - cancel instruction
*/
#[entrypoint]
template swaps() {

  /*
  * The offer utxo is initialized and checked for validity.
  * This is equal for all instructions.
  */ 
  utxo offerUtxo;
  offerUtxo.check();

  /*
  * Take offer instruction:
  *   - Combinination of offerUtxo and offerRewardUtxo.
  *   - Take offer instruction signal is initialized,
  *     it is required to be 0 or 1 (see the end of the template).
  *     If takeOfferInstruction is zero offer reward utxo is not checked.
  *   - offerRewardUtxo is initialized and checked for validity.
  *     - the check ensures that the offer taker executes the trade
  *        at the price, asset and with the recipient specified in the offer utxo.
  */
  signal input takeOfferInstruction;

  utxo offerRewardUtxo;
  offerRewardUtxo.check();


  /*
  * The cancel instruction spends the offer utxo,
  * without creating a reward utxo.
  * It is not necessary to check the reward utxo,
  * because only the maker can execute this instruction.
  */
  // signal input cancelInstruction;

  // utxo cancelSignerUtxo;
  // cancelSignerUtxo.check();

  // all instructions are 0 or 1
  var instructionIsSet = 0;
  (1 - takeOfferInstruction) * takeOfferInstruction === 0;
  instructionIsSet += takeOfferInstruction;
  // (1 - cancelInstruction) * cancelInstruction === 0;
  // instructionIsSet += cancelInstruction;
  // exactly one instruction is 1
  instructionIsSet === 1;
}